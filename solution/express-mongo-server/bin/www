/**
 * @fileoverview Entry point del server Express con MongoDB
 * @description Punto di avvio dell'applicazione che gestisce connessione database,
 * inizializzazione modelli, avvio server HTTP e cleanup delle risorse
 */

require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("express-mongo-server:server");
var http = require("http");

const databaseManager = require('../services/databaseManager');
const { startCleanupInterval, stopCleanupInterval } = require('../utils/cleanupInactiveRooms')

const roomModel = require('../models/roomModel');
const messageModel = require('../models/messageModel');
const reviewModel = require('../models/reviewModel');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Start the server with database connection and cleanup
 */

async function startServer() {
  try {
    console.log('🎬 === FILM DATABASE - SERVER MONGODB ===');
    
    // Connect to database
    console.log('🔌 Connecting to database...');
    await databaseManager.connect();
    console.log('✅ Database connected!');
    
    // Start background cleanup
    startCleanupInterval();
    console.log('🧹 Cleanup service started');
    
    // Start HTTP server
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    
  } catch (error) {
    console.error('❌ Critical error:', error.message);
    process.exit(1);
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log('🚀 MongoDB Server started successfully!');
  console.log('📡 Server listening on http://localhost:' + addr.port);
  debug("Listening on " + bind);
}

/**
 * Graceful shutdown
 */

let isShuttingDown = false;
const FORCE_EXIT_MS = 10000; // tempo massimo per lo shutdown ordinato
let forceExitTimer = null;

/**
 * @function forceKill
 * @description Termina immediatamente il processo senza graceful shutdown
 */
function forceKill() {
  console.log('💀 Terminazione forzata del processo MongoDB...');
  process.exit(0);
}

/**
 * @function gracefulShutdown
 * @description Gestisce la chiusura ordinata del server
 */
async function gracefulShutdown() {
  if (isShuttingDown) {
    console.log('🔄 Shutdown già in corso...');
    return;
  }

  isShuttingDown = true;
  console.log('\n🛑 Shutting down MongoDB server...');
  // Impostiamo un timeout oltre il quale forziamo l'uscita
  forceExitTimer = setTimeout(() => {
    console.error(`⏱️ Shutdown non completato entro ${FORCE_EXIT_MS}ms. Forzo l'uscita...`);
    forceKill();
  }, FORCE_EXIT_MS);
  
  try {
    // Ferma eventuali job periodici prima di chiudere le connessioni
    stopCleanupInterval();

    // Attendi la chiusura del server per permettere alle richieste in corso di terminare
    await new Promise((resolve, reject) => {
      server.close((err) => (err ? reject(err) : resolve()));
    });
    await databaseManager.disconnect();
    console.log('👋 Shutdown completed');
    if (forceExitTimer) {
      clearTimeout(forceExitTimer);
      forceExitTimer = null;
    }
    process.exit(0);
  } catch (error) {
    console.error('❌ Errore durante lo shutdown:', error);
    if (forceExitTimer) {
      clearTimeout(forceExitTimer);
      forceExitTimer = null;
    }
    process.exit(1);
  }
}

// Gestione più robusta dei segnali
process.on('SIGINT', () => {
  if (isShuttingDown) {
    console.log('\n🛑 Secondo SIGINT ricevuto, forzo l\'uscita immediata');
    forceKill();
    return;
  }
  console.log('\n🛑 Ricevuto SIGINT (Ctrl+C) - avvio graceful shutdown...');
  gracefulShutdown();
});

process.on('SIGTERM', () => gracefulShutdown());

// Gestione errori non catturati
process.on('uncaughtException', (err) => {
  console.error('💥 Uncaught Exception:', err);
  gracefulShutdown();
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('💥 Unhandled Rejection at:', promise, 'reason:', reason);
  gracefulShutdown();
});

startServer();