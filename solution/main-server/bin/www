/**
 * Module dependencies.
 */
require("dotenv").config();

var app = require("../app");
var debug = require("debug")("main-server:server");
var http = require("http");
const createSocketServer = require("../socket/serverSocketSetup");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.MAIN_SERVER_PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

// Setup Socket.IO sul server HTTP
const io = createSocketServer(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * GRACEFUL SHUTDOWN
 */
let isShuttingDown = false;
let serverClosed = false;
let forceShutdownTimeout = null;
let socketClosed = false;

/**
 * @function checkAndExit
 * @description Controlla se il server HTTP è chiuso per uscire
 */
function checkAndExit() {
  console.log(`🔍 DEBUG: checkAndExit called - serverClosed: ${serverClosed}, socketClosed: ${socketClosed}`);
  if (serverClosed && socketClosed) {
    if (forceShutdownTimeout) {
      clearTimeout(forceShutdownTimeout);
      console.log('🔍 DEBUG: Timeout cancellato');
    }
    console.log('✅ Graceful shutdown completato.');
    process.exit(0);
  }
}

/**
 * @function gracefulShutdown
 * @description Gestisce la chiusura ordinata del server
 * @param {string} signal - Il segnale ricevuto (SIGINT o SIGTERM)
 */
function gracefulShutdown(signal) {
  if (isShuttingDown) {
    console.log('🔄 Shutdown già in corso...');
    return;
  }

  isShuttingDown = true;
  console.log(`\n🛑 Ricevuto segnale ${signal}. Avvio graceful shutdown...`);
  
  // Riduco il timeout a 3 secondi per una chiusura più veloce
  forceShutdownTimeout = setTimeout(() => {
    console.error('⚠️ Timeout raggiunto. Forzo la chiusura del processo.');
    process.exit(1);
  }, 3000);

  // Chiude prima Socket.IO
  if (io && typeof io.close === 'function') {
    console.log('🔌 Chiusura connessioni Socket.io...');
    io.close((err) => {
      if (err) {
        console.error('❌ Errore durante la chiusura di Socket.io:', err && err.message ? err.message : err);
      } else {
        console.log('✅ Socket.io chiuso correttamente');
      }
      socketClosed = true;
      checkAndExit();
    });
  } else {
    socketClosed = true;
  }

  // Poi chiude server HTTP
  console.log('🌐 Chiusura server HTTP...');
  server.close((err) => {
    if (err) {
      console.error('❌ Errore durante la chiusura del server HTTP:', err.message);
    } else {
      console.log('✅ Server HTTP chiuso correttamente');
    }
    serverClosed = true;
    console.log('🔍 DEBUG: Server HTTP marcato come chiuso');
    checkAndExit();
  });

  server.unref();
}

/**
 * @function forceKill
 * @description Termina immediatamente il processo senza graceful shutdown
 */
function forceKill() {
  console.log('💀 Terminazione forzata del processo...');
  process.exit(0);
}

// Gestione più robusta dei segnali
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// Gestione errori non catturati
process.on('uncaughtException', (err) => {
  console.error('💥 Uncaught Exception:', err);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('💥 Unhandled Rejection at:', promise, 'reason:', reason);
  gracefulShutdown('UNHANDLED_REJECTION');
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`🚀 Server avviato su ${bind}`);
  console.log(`📚 API Documentation: http://localhost:${addr.port}/api-docs`);
  console.log('🛠️ Premi Ctrl+C per graceful shutdown');
}