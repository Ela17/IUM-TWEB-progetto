{{!-- 
  Catalogo Film di CinemaHub
  Questa pagina sostituisce il {{{body}}} nel layout.hbs
  Utilizza le API esistenti per caricare i film
--}}

<!-- Movies Header -->
<div class="movies-header bg-dark text-white py-5">
  <div class="container">
    <div class="row align-items-center">
      <div class="col-md-12">
        <h1 class="display-4 fw-bold mb-3">
          <i class="bi bi-film me-3 text-cinema-gold"></i>
          Movie Catalog
        </h1>
        <p class="lead mb-0">Discover amazing movies from our collections</p>
      </div>
    </div>
  </div>
</div>

<!-- Advanced Search & Filters -->
<div class="container mt-4">
  <div class="card shadow-sm">
    <div class="card-header bg-white">
      <div class="d-flex justify-content-between align-items-center">
        <h6 class="mb-0">
          <i class="bi bi-funnel me-2"></i>
          Search & Filters
        </h6>
        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#advancedSearchForm" aria-expanded="true">
          <i class="bi bi-chevron-up" id="collapse-icon"></i>
        </button>
      </div>
    </div>
    
    <div class="collapse show" id="advancedSearchForm">
      <div class="card-body">
        <!-- Search Form -->
        <form id="movie-search-form">
          <!-- Quick Filters Row -->
          <div class="row mb-4">
            <div class="col-12">
              <label class="form-label fw-medium">Quick Collections</label>
              <div class="d-flex flex-wrap gap-2">
                <button type="button" class="btn btn-outline-primary btn-sm collection-filter active" data-collection="top-rated">
                  <i class="bi bi-star me-1"></i>Top Rated
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm collection-filter" data-collection="recent">
                  <i class="bi bi-calendar me-1"></i>Recent Releases
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm collection-filter" data-collection="action">
                  <i class="bi bi-lightning me-1"></i>Action Movies
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm collection-filter" data-collection="drama">
                  <i class="bi bi-mask me-1"></i>Drama
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm collection-filter" data-collection="comedy">
                  <i class="bi bi-emoji-laughing me-1"></i>Comedy
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm collection-filter" data-collection="custom">
                  <i class="bi bi-sliders me-1"></i>Custom Search
                </button>
              </div>
            </div>
          </div>

          <!-- Advanced Search Fields (initially hidden) -->
          <div id="custom-search-fields" class="d-none">
            <!-- Title Search -->
            <div class="row mb-3">
              <div class="col-md-12">
                <label for="search-title" class="form-label">Movie Title</label>
                <div class="input-group">
                  <span class="input-group-text">
                    <i class="bi bi-search"></i>
                  </span>
                  <input type="text" class="form-control" id="search-title" name="title" 
                         placeholder="Enter movie title..." autocomplete="off">
                </div>
              </div>
            </div>

            <!-- Advanced Filters -->
            <div class="row g-3">
              <div class="col-md-6">
                <label for="search-genre" class="form-label">Genre</label>
                <select class="form-select" id="search-genre" name="genre">
                  <option value="">All Genres</option>
                  <option value="Action">Action</option>
                  <option value="Adventure">Adventure</option>
                  <option value="Animation">Animation</option>
                  <option value="Comedy">Comedy</option>
                  <option value="Crime">Crime</option>
                  <option value="Documentary">Documentary</option>
                  <option value="Drama">Drama</option>
                  <option value="Fantasy">Fantasy</option>
                  <option value="Horror">Horror</option>
                  <option value="Romance">Romance</option>
                  <option value="Sci-Fi">Science Fiction</option>
                  <option value="Thriller">Thriller</option>
                  <option value="War">War</option>
                  <option value="Western">Western</option>
                </select>
              </div>
              
              <div class="col-md-3">
                <label for="search-year-from" class="form-label">Year From</label>
                <input type="number" class="form-control" id="search-year-from" name="year_from" 
                       min="1900" max="2025" placeholder="1990">
              </div>
              
              <div class="col-md-3">
                <label for="search-year-to" class="form-label">Year To</label>
                <input type="number" class="form-control" id="search-year-to" name="year_to" 
                       min="1900" max="2025" placeholder="2025">
              </div>
              
              <div class="col-md-3">
                <label for="search-min-rating" class="form-label">Min Rating</label>
                <select class="form-select" id="search-min-rating" name="min_rating">
                  <option value="">Any Rating</option>
                  <option value="1">1+ Stars</option>
                  <option value="2">2+ Stars</option>
                  <option value="3">3+ Stars</option>
                  <option value="4">4+ Stars</option>
                  <option value="5">5 Stars</option>
                </select>
              </div>
              
              <div class="col-md-3">
                <label for="search-max-rating" class="form-label">Max Rating</label>
                <select class="form-select" id="search-max-rating" name="max_rating">
                  <option value="">Any Rating</option>
                  <option value="5">Up to 5 Stars</option>
                  <option value="4">Up to 4 Stars</option>
                  <option value="3">Up to 3 Stars</option>
                  <option value="2">Up to 2 Stars</option>
                  <option value="1">Up to 1 Star</option>
                </select>
              </div>
              
              <div class="col-md-3">
                <label for="search-limit" class="form-label">Results per page</label>
                <select class="form-select" id="search-limit" name="limit">
                  <option value="12">12 results</option>
                  <option value="24" selected>24 results</option>
                  <option value="48">48 results</option>
                </select>
              </div>
              
              <div class="col-md-3">
                <div class="d-flex gap-2 align-items-end h-100">
                  <button type="submit" class="btn btn-cinema-gold hover-lift">
                    <i class="bi bi-search me-1"></i>
                    Search
                  </button>
                  <button type="button" class="btn btn-outline-secondary hover-lift" id="clear-filters">
                    <i class="bi bi-x-circle me-1"></i>
                    Clear
                  </button>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Title & Stats -->
<div class="container mt-4">
  <div class="row align-items-center mb-3">
    <div class="col-md-8">
      <h3 id="collection-title" class="mb-0">Top Rated Movies</h3>
      <small id="collection-description" class="text-muted">Movies with rating 4+ stars</small>
    </div>
    <div class="col-md-4 text-end">
      <small id="results-info" class="text-muted"></small>
    </div>
  </div>
</div>

<!-- Loading State -->
<div class="container">
  <div id="loading-state" class="text-center py-5">
    <div class="spinner-border text-cinema-gold" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-3 text-muted">Loading movies...</p>
  </div>
</div>

<!-- Movies Grid -->
<div class="container">
  <div id="movies-container">

  </div>
</div>

<!-- Error State -->
<div class="container">
  <div id="error-state" class="alert alert-danger d-none" role="alert">
    <i class="bi bi-exclamation-triangle me-2"></i>
    <strong>Error loading movies:</strong> <span id="error-message"></span>
    <button type="button" class="btn btn-outline-danger btn-sm ms-2" onclick="loadCurrentCollection()">
      <i class="bi bi-arrow-repeat me-1"></i>
      Try Again
    </button>
  </div>
</div>

<!-- Pagination -->
<div class="container mt-4 mb-5">
  <div id="pagination-container" class="d-flex justify-content-center">

  </div>
</div>

<!-- No Results State -->
<div class="container mt-4">
  <div id="no-results" class="text-center py-5 d-none">
    <i class="bi bi-film fs-1 text-muted mb-3"></i>
    <h4>No movies found</h4>
    <p class="text-muted">Try a different collection or use our advanced search</p>
            <a href="/search" class="btn btn-cinema-gold hover-lift">
      <i class="bi bi-search me-1"></i>
      Advanced Search
    </a>
  </div>
</div>

<script>

let currentCollection = 'top-rated';
let currentPage = 1;

// Configurazione delle collezioni con filtri
const collections = {
  'top-rated': {
    title: 'Top Rated Movies',
    description: 'Movies with rating 4+ stars',
    params: { min_rating: 4, limit: 24 }
  },
  'recent': {
    title: 'Recent Releases',
    description: 'Movies from 2020 onwards',
    params: { year_from: 2020, limit: 24 }
  },
  'action': {
    title: 'Action Movies',
    description: 'High-octane action and adventure films',
    params: { genre: 'Action', min_rating: 3, limit: 24 }
  },
  'drama': {
    title: 'Drama Movies', 
    description: 'Compelling dramatic storytelling',
    params: { genre: 'Drama', min_rating: 3, limit: 24 }
  },
  'comedy': {
    title: 'Comedy Movies',
    description: 'Laugh-out-loud comedies',
    params: { genre: 'Comedy', min_rating: 3, limit: 24 }
  },
  'custom': {
    title: 'Custom Search',
    description: 'Search with your own criteria',
    params: {}
  }
};

document.addEventListener('DOMContentLoaded', function() {
  // Controlla se c'è un parametro search nell'URL
  const urlParams = new URLSearchParams(window.location.search);
  const searchQuery = urlParams.get('search');
  
  if (searchQuery) {
    // Preimposta il campo di ricerca
    const titleInput = document.getElementById('search-title');
    if (titleInput) {
      titleInput.value = searchQuery;
    }
    
    // Attiva automaticamente la ricerca personalizzata
    switchCollection('custom');
    
    // Esegui la ricerca automaticamente
    setTimeout(() => {
      performCustomSearch();
    }, 500);
  }
  
  initializeMovieCatalog();
});

/**
 * Inizializza il catalogo film
 */
function initializeMovieCatalog() {
  setupEventListeners();
  loadCurrentCollection();
}

/**
 * Setup dei listener di eventi
 */
function setupEventListeners() {
  // Collection filter buttons
  document.querySelectorAll('.collection-filter').forEach(button => {
    button.addEventListener('click', (e) => {
      const collection = e.target.dataset.collection;
      switchCollection(collection);
    });
  });

  // Advanced search form
  const searchForm = document.getElementById('movie-search-form');
  if (searchForm) {
    searchForm.addEventListener('submit', (e) => {
      e.preventDefault();
      performCustomSearch();
    });
  }

  // Clear filters button
  const clearBtn = document.getElementById('clear-filters');
  if (clearBtn) {
    clearBtn.addEventListener('click', clearAllFilters);
  }

  // Collapse icon toggle
  const collapseElement = document.getElementById('advancedSearchForm');
  if (collapseElement) {
    collapseElement.addEventListener('show.bs.collapse', () => {
      document.getElementById('collapse-icon').className = 'bi bi-chevron-up';
    });
    collapseElement.addEventListener('hide.bs.collapse', () => {
      document.getElementById('collapse-icon').className = 'bi bi-chevron-down';
    });
  }
}

/**
 * Cambia collezione attiva
 */
function switchCollection(collection) {
  if (collection === currentCollection) return;
  
  // Update active button
  document.querySelectorAll('.collection-filter').forEach(btn => {
    btn.classList.remove('active');
    if (btn.dataset.collection === collection) {
      btn.classList.add('active');
    }
  });
  
  currentCollection = collection;
  currentPage = 1;
  
  // Show/hide custom search fields
  const customFields = document.getElementById('custom-search-fields');
  if (collection === 'custom') {
    customFields.classList.remove('d-none');
    updateCollectionInfo();
    return;
  } else {
    customFields.classList.add('d-none');
    clearFormFields();
  }
  
  updateCollectionInfo();
  loadCurrentCollection();
}

/**
 * Esegue una ricerca personalizzata basata sui campi del form
 */
function performCustomSearch() {
  currentCollection = 'custom';
  currentPage = 1;
  
  const formData = new FormData(document.getElementById('movie-search-form'));
  const customParams = {};
  
  // Raccogli parametri dal form
  for (const [key, value] of formData.entries()) {
    if (value.trim()) {
      customParams[key] = value.trim();
    }
  }
  
  // Set default limit if not specified
  if (!customParams.limit) {
    customParams.limit = 24;
  }
  
  // Update collection config
  collections['custom'].params = customParams;
  
  // Update title based on search criteria
  let title = 'Custom Search Results';
  if (customParams.title) {
    title = `Search: "${customParams.title}"`;
  } else if (customParams.genre) {
    title = `${customParams.genre} Movies`;
  }
  
  collections['custom'].title = title;
  collections['custom'].description = buildSearchDescription(customParams);
  
  updateCollectionInfo();
  loadCurrentCollection();
}

/**
 * Costruisce una descrizione per la ricerca personalizzata
 */
function buildSearchDescription(params) {
  const parts = [];
  
  if (params.genre) parts.push(`Genre: ${params.genre}`);
  if (params.year_from && params.year_to) {
    parts.push(`Years: ${params.year_from}-${params.year_to}`);
  } else if (params.year_from) {
    parts.push(`From: ${params.year_from}`);
  } else if (params.year_to) {
    parts.push(`Until: ${params.year_to}`);
  }
  if (params.min_rating) parts.push(`Min rating: ${params.min_rating}+`);
  if (params.max_rating) parts.push(`Max rating: ${params.max_rating}`);
  
  return parts.length > 0 ? parts.join(' • ') : 'Custom search criteria';
}

/**
 * Pulisce tutti i campi del form
 */
function clearAllFilters() {
  const form = document.getElementById('movie-search-form');
  const inputs = form.querySelectorAll('input[type="text"], input[type="number"]');
  const selects = form.querySelectorAll('select');
  
  inputs.forEach(input => input.value = '');
  selects.forEach(select => select.selectedIndex = 0);
  
  // Reset to default limit
  document.getElementById('search-limit').value = '24';
}

/**
 * Pulisce i campi del form quando si cambia collezione
 */
function clearFormFields() {
  const form = document.getElementById('movie-search-form');
  if (form && currentCollection !== 'custom') {
    clearAllFilters();
  }
}

/**
 * Aggiorna le informazioni della collezione
 */
function updateCollectionInfo() {
  const config = collections[currentCollection];
  document.getElementById('collection-title').textContent = config.title;
  document.getElementById('collection-description').textContent = config.description;
}

/**
 * Carica la collezione corrente utilizzando l'API /api/movies/search
 */
async function loadCurrentCollection(page = 1) {
  currentPage = page;
  const config = collections[currentCollection];
  
  // Costruisci parametri per l'API esistente
  const params = new URLSearchParams({
    ...config.params,
    page: page
  });
  
  try {
    showLoading();
    hideError();
    
    // Chiama l'API /api/movies/search
    const response = await fetch(`/api/movies/search?${params.toString()}`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    displayMovies(data);
    
  } catch (error) {
    console.error('Error loading collection:', error);
    showError(error.message);
  } finally {
    hideLoading();
  }
}

/**
 * Mostra i film nella griglia
 */
function displayMovies(data) {
  const container = document.getElementById('movies-container');
  
  if (!data.movies || data.movies.length === 0) {
    showNoResults();
    return;
  }
  
  // Update results info
  updateResultsInfo(data);
  
  // Create movies grid
  let html = '<div class="row g-4">';
  
  data.movies.forEach(movie => {
    html += createMovieCard(movie);
  });
  
  html += '</div>';
  container.innerHTML = html;
  
  // Show pagination if available
  if (data.pagination && data.pagination.totalPages > 1) {
    createPagination(data.pagination);
  } else {
    document.getElementById('pagination-container').innerHTML = '';
  }
  
  hideNoResults();
}

/**
 * Crea una card per un film
 */
function createMovieCard(movie) {
  const posterUrl = movie.poster_url || '/images/no-poster.jpg';
  const title = movie.name || movie.title || 'Unknown Title';
  const year = movie.year || 'Unknown';
  const rating = movie.rating || 'N/A';
  const duration = movie.duration ? ` • ${movie.duration}min` : '';
  const description = movie.description 
    ? (movie.description.length > 120 ? movie.description.substring(0, 120) + '...' : movie.description)
    : '';
  const genre = movie.genre || '';
  
  return `
    <div class="col-md-6 col-lg-4 col-xl-3">
      <div class="card movie-card h-100 border-0 shadow-sm">
        <div class="position-relative">
          <img src="${posterUrl}" alt="${escapeHtml(title)}" 
               class="card-img-top" style="height: 350px; object-fit: cover;"
               onerror="this.src='/images/no-poster.jpg'">
          <div class="movie-rating-badge position-absolute top-0 end-0 m-2 bg-dark text-white px-2 py-1 rounded">
            <i class="bi bi-star-fill text-warning me-1"></i>
            <span>${rating}</span>
          </div>
          ${genre ? `<div class="movie-genre-badge position-absolute bottom-0 start-0 m-2 bg-cinema-gold text-dark px-2 py-1 rounded-pill small fw-medium">${genre}</div>` : ''}
        </div>
        <div class="card-body d-flex flex-column">
          <h6 class="card-title mb-2 fw-bold">${escapeHtml(title)}</h6>
          <div class="text-muted small mb-2">
            <i class="bi bi-calendar3 me-1"></i>
            <span>${year}</span>${duration}
          </div>
          <p class="card-text small text-muted flex-grow-1 mb-3">${escapeHtml(description)}</p>
          <a href="/api/movies/${movie.id}" class="btn btn-outline-primary btn-sm mt-auto">
            <i class="bi bi-eye me-1"></i>
            View Details
          </a>
        </div>
      </div>
    </div>
  `;
}

/**
 * Crea la paginazione
 */
function createPagination(pagination) {
  const container = document.getElementById('pagination-container');
  
  if (pagination.totalPages <= 1) {
    container.innerHTML = '';
    return;
  }
  
  let html = '<nav><ul class="pagination">';
  
  // Previous button
  const prevDisabled = pagination.currentPage === 1 ? 'disabled' : '';
  html += `
    <li class="page-item ${prevDisabled}">
      <a class="page-link" href="#" onclick="${prevDisabled ? 'return false;' : `loadCurrentCollection(${pagination.currentPage - 1})`}">
        <i class="bi bi-chevron-left"></i>
      </a>
    </li>
  `;
  
  // Page numbers
  const startPage = Math.max(1, pagination.currentPage - 2);
  const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
  
  for (let i = startPage; i <= endPage; i++) {
    const active = i === pagination.currentPage ? 'active' : '';
    html += `
      <li class="page-item ${active}">
        <a class="page-link" href="#" onclick="loadCurrentCollection(${i})">${i}</a>
      </li>
    `;
  }
  
  // Next button
  const nextDisabled = pagination.currentPage === pagination.totalPages ? 'disabled' : '';
  html += `
    <li class="page-item ${nextDisabled}">
      <a class="page-link" href="#" onclick="${nextDisabled ? 'return false;' : `loadCurrentCollection(${pagination.currentPage + 1})`}">
        <i class="bi bi-chevron-right"></i>
      </a>
    </li>
  `;
  
  html += '</ul></nav>';
  container.innerHTML = html;
}

/**
 * Utility functions
 */
function updateResultsInfo(data) {
  const info = document.getElementById('results-info');
  if (data.pagination) {
    info.textContent = `Page ${data.pagination.currentPage} of ${data.pagination.totalPages} • ${data.pagination.totalItems} movies total`;
  } else if (data.movies) {
    info.textContent = `${data.movies.length} movies found`;
  }
}

function showLoading() {
  document.getElementById('loading-state').classList.remove('d-none');
  document.getElementById('movies-container').innerHTML = '';
  document.getElementById('pagination-container').innerHTML = '';
}

function hideLoading() {
  document.getElementById('loading-state').classList.add('d-none');
}

function showError(message) {
  const errorDiv = document.getElementById('error-state');
  document.getElementById('error-message').textContent = message;
  errorDiv.classList.remove('d-none');
}

function hideError() {
  document.getElementById('error-state').classList.add('d-none');
}

function showNoResults() {
  document.getElementById('no-results').classList.remove('d-none');
  document.getElementById('results-info').textContent = '';
}

function hideNoResults() {
  document.getElementById('no-results').classList.add('d-none');
}

function escapeHtml(text) {
  return window.cinemaHub ? window.cinemaHub.escapeHtml(text) : text;
}
</script>